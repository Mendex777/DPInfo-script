#!/bin/bash

RESET="\033[0m"
PURPLE="\033[1;35m"
BLUE="\033[1;34m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
CYAN="\033[1;36m"

echo -e "${PURPLE}Добро пожаловать в систему личных сервисов!${RESET}"
echo -e "${BLUE}Текущее время: $(date '+%Y-%m-%d %H:%M:%S')${RESET}"
echo -e "${BLUE}Версия ядра системы: $(uname -r)${RESET}"
echo -e "${BLUE}Время работы системы: $(uptime -p)${RESET}"

if command -v sing-box >/dev/null 2>&1; then
    CURRENT_VERSION=$(sing-box version 2>/dev/null | head -n 1 | cut -d ' ' -f 3 || echo "Неизвестная версия")
    CURRENT_VERSION_TYPE=$(echo "$CURRENT_VERSION" | grep -oE '(alpha|beta|rc)' || echo "stable")
    CURRENT_VERSION="${CURRENT_VERSION#v}"

    ALL_VERSIONS=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases | grep -oE '"tag_name":\s*"v[^"]+' | cut -d '"' -f 4)

    if [[ -z "$ALL_VERSIONS" ]]; then
        echo -e "${RED}Не удалось получить информацию о последней версии Sing-box${RESET}"
        exit 1
    fi

    if [[ "$CURRENT_VERSION_TYPE" == "stable" ]]; then
        LATEST_VERSION=$(echo "$ALL_VERSIONS" | grep -vE '(alpha|beta|rc)' | head -n 1)
    else
        LATEST_VERSION=$(echo "$ALL_VERSIONS" | grep -E "(alpha|beta|$CURRENT_VERSION_TYPE)" | head -n 1)
    fi

    LATEST_VERSION="${LATEST_VERSION#v}"

    echo -e "${YELLOW}Информация о версии Sing-box:${RESET}"
    echo -e "${BLUE}Текущая версия:${RESET} ${CURRENT_VERSION} ${BLUE}Последняя версия:${RESET} ${LATEST_VERSION}"

    if [[ -n "$LATEST_VERSION" ]]; then
        if [[ "$CURRENT_VERSION" == "$LATEST_VERSION" ]]; then
            echo -e "${GREEN}Sing-box уже последней версии${RESET}"
        else
            echo -e "${YELLOW}Обнаружена новая версия! Рекомендуется обновить Sing-box${RESET}"
        fi
    else
        echo -e "${RED}Не удалось получить информацию о последней версии Sing-box${RESET}"
    fi
else
    echo -e "${RED}Sing-box не установлен${RESET}"
fi

if systemctl is-active sing-box >/dev/null 2>&1; then
    echo -e "${GREEN}Сервис Sing-box запущен${RESET}"
    SINGBOX_MEMORY=$(ps -o rss= -C sing-box | awk '{total += $1} END {printf "%.2f", total/1024}')
    if [[ -n "$SINGBOX_MEMORY" ]]; then
        echo -e "${BLUE}Использование памяти Sing-box:${RESET} ${SINGBOX_MEMORY} MB"
    else
        echo -e "${RED}Не удалось получить использование памяти Sing-box!${RESET}"
    fi
else
    echo -e "${RED}Сервис Sing-box не запущен${RESET}"
    echo -e "${RED}Sing-box не установлен или недоступен!${RESET}"
fi

if systemctl list-units --type=service --all | grep -q "nftables-singbox.service"; then
    if systemctl is-enabled nftables-singbox.service >/dev/null 2>&1; then
        echo -e "${CYAN}Автозапуск сервиса Nftables-singbox включен${RESET}"
    else
        echo -e "${PURPLE}Автозапуск сервиса Nftables-singbox не включен${RESET}"
    fi
else
    echo -e "${RED}Сервис автозапуска Nftables-singbox не установлен!${RESET}"
fi

if command -v nft >/dev/null 2>&1; then
    if systemctl is-active nftables >/dev/null 2>&1; then
        echo -e "${CYAN}Брандмауэр Nftables включен${RESET}"
    else
        echo -e "${PURPLE}Брандмауэр Nftables не работает${RESET}"
    fi
else
    echo -e "${RED}Брандмауэр Nftables не установлен!${RESET}"
fi

UPDATE_SCRIPT="/etc/sing-box/update-singbox.sh"
if [ -f "$UPDATE_SCRIPT" ]; then
    if crontab -l 2>/dev/null | grep -q "$UPDATE_SCRIPT"; then
        echo -n -e "${GREEN}Автообновление настроено${RESET}"
        INTERVAL=$(crontab -l 2>/dev/null | grep "$UPDATE_SCRIPT" | grep -oE '\*/[0-9]+' | sed 's|\*/||')
        if [ -n "$INTERVAL" ]; then
            echo -n -e " ${CYAN}Интервал:${RESET} ${INTERVAL} часов"
        else
            echo -n -e " ${RED}Не удалось получить время автообновления!${RESET}"
            echo -n -e " ${CYAN}Записи в Crontab:${RESET} "
            crontab -l 2>/dev/null | grep "$UPDATE_SCRIPT"
        fi
    else
        echo -n -e "${RED}Автообновление не настроено!${RESET}"
    fi
    LAST_UPDATE=$(stat -c %y "$UPDATE_SCRIPT" 2>/dev/null | cut -d'.' -f1)
    if [ -n "$LAST_UPDATE" ]; then
        echo -e " ${CYAN}Последнее обновление:${RESET} ${LAST_UPDATE}"
    else
        echo -e " ${RED}Не удалось получить время последнего обновления!${RESET}"
    fi
else
    echo -e "${RED}Файл автообновления не найден!${RESET}"
fi

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export TERM=xterm

CPU=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5); printf "%.2f", usage}')
echo -e "${YELLOW}Использование CPU:${RESET} ${CPU}%, Свободно: $(echo "100 - $CPU" | bc)%"

mem_total=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
mem_free=$(awk '/MemAvailable/ {print $2}' /proc/meminfo)
mem_used=$((mem_total - mem_free))
mem_usage=$(awk -v used=$mem_used -v total=$mem_total 'BEGIN {printf "%.2f", (used/total)*100}')
echo -e "${YELLOW}Текущее использование памяти:${RESET} $((mem_used / 1024))/$((mem_total / 1024)) MB (${mem_usage}%)"

disk_usage=$(df -h / 2>/dev/null | awk 'NR==2 {print $5}')
echo -e "${YELLOW}Текущее использование диска:${RESET} ${disk_usage}"

if [[ -f /run/systemd/resolve/resolv.conf ]]; then
    DNS_SERVERS=$(grep '^nameserver' /run/systemd/resolve/resolv.conf | awk '{print $2}')
else
    DNS_SERVERS=$(grep '^nameserver' /etc/resolv.conf | awk '{print $2}')
fi

echo -n -e "${YELLOW}Адреса DNS серверов:${RESET} "
if [[ -n "$DNS_SERVERS" ]]; then
    for dns in $DNS_SERVERS; do
        echo -n "  $dns"
    done
    echo
else
    echo -e "${RED}Информация о DNS серверах не найдена!${RESET}"
fi

DEFAULT_GATEWAY=$(ip route | awk '/default/ {print $3}')
echo -n -e "${YELLOW}Шлюз по умолчанию:${RESET} "
[[ -n "$DEFAULT_GATEWAY" ]] && echo "$DEFAULT_GATEWAY" || echo -e "${RED}Информация о шлюзе по умолчанию не найдена!${RESET}"

GATEWAY_INTERFACE=$(ip route | awk '/default/ {print $5}')
echo -n -e "${YELLOW}Интерфейс шлюза:${RESET} "
[[ -n "$GATEWAY_INTERFACE" ]] && echo "$GATEWAY_INTERFACE" || echo -e "${RED}Информация об интерфейсе шлюза не найдена!${RESET}"

echo -e "${BLUE}Информация о сетевых интерфейсах:${RESET}"
for interface in $(ip -o -4 addr show | awk '{print $2}' | sort | uniq); do
    [[ "$interface" =~ ^(lo|docker0|br0)$ ]] && continue
    MAC_ADDRESS=$(cat /sys/class/net/"$interface"/address 2>/dev/null)
    IP_ADDRESS=$(ip -o -4 addr show "$interface" | awk '{print $4}' | cut -d'/' -f1)
    IS_DHCP=$(grep -qE "iface\s+$interface\s+inet\s+dhcp" /etc/network/interfaces 2>/dev/null && echo "Выдано DHCP" || echo "Статический IP")
    echo -e "${YELLOW}Интерфейс:${RESET} $interface"
    echo -e "  ${BLUE}MAC адрес:${RESET} $MAC_ADDRESS"
    echo -e "  ${BLUE}IP адрес:${RESET} ${IP_ADDRESS:-Не назначен}"
    echo -e "  ${BLUE}Тип IP:${RESET} $IS_DHCP"
done

exit
